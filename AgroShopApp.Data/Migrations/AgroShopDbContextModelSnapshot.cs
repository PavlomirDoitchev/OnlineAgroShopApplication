// <auto-generated />
using System;
using AgroShopApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgroShopApp.Data.Migrations
{
    [DbContext(typeof(AgroShopDbContext))]
    partial class AgroShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgroShopApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Cart identifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User who owns the cart");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts", t =>
                        {
                            t.HasComment("User's Cart in the system");
                        });
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.CartItem", b =>
                {
                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Cart identifier (composite key)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product added to the cart (composite key)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Number of items added");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems", t =>
                        {
                            t.HasComment("Product-to-cart mapping with quantity");
                        });
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Category name");

                    b.HasKey("Id");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("Product category in the catalog");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Seeds"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fertilizer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pesticide"
                        });
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Favorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User who favorited the product");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Favorited product ID");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Timestamp when product was added to favorites");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorites", t =>
                        {
                            t.HasComment("User-product favorites");
                        });
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order identifier");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasComment("Delivery address for the order");

                    b.Property<DateTime>("OrderedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the order was placed");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Current status of the order");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total amount of the order at the time of purchase");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User who placed the order");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", t =>
                        {
                            t.HasComment("Submitted order with snapshot data");
                        });
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Parent order ID (composite key)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Ordered product ID (composite key)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of product in the order");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Unit price of product at the time of purchase");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", t =>
                        {
                            t.HasComment("Mapping between product and order with quantity and price snapshot");
                        });
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Product identifier");

                    b.Property<DateTime>("AddedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date product was added to the store");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Foreign key to category");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Soft-delete timestamp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Detailed description of the product");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Optional product image URL");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Whether product is marked as currently available");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Whether product is soft-deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price per unit");

                    b.Property<int>("StockQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10)
                        .HasComment("Available stock quantity");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Product available for purchase");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            AddedOn = new DateTime(2025, 7, 23, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9677),
                            CategoryId = 1,
                            Description = "Rich, juicy tomatoes perfect for home gardening. Non-GMO and high germination rate.",
                            ImageUrl = "/images/seeds-tomato.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Heirloom Tomato Seeds",
                            Price = 3.49m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            AddedOn = new DateTime(2025, 7, 27, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9791),
                            CategoryId = 1,
                            Description = "Fast-growing leafy greens ideal for spring gardens.",
                            ImageUrl = "/images/seeds-lettuce.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Organic Lettuce Seeds",
                            Price = 2.99m,
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000003"),
                            AddedOn = new DateTime(2025, 7, 30, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9795),
                            CategoryId = 1,
                            Description = "Crunchy cucumbers, suitable for pickling or fresh eating.",
                            ImageUrl = "https://images.unsplash.com/photo-1449300079323-02e209d9d3a6?q=80&w=1548&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Cucumber Seeds",
                            Price = 2.59m,
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000004"),
                            AddedOn = new DateTime(2025, 7, 25, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9799),
                            CategoryId = 1,
                            Description = "Sweet and crisp carrots with fast growth cycle.",
                            ImageUrl = "https://images.unsplash.com/photo-1447175008436-054170c2e979?q=80&w=1998&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Carrot Seeds",
                            Price = 1.99m,
                            StockQuantity = 90
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000005"),
                            AddedOn = new DateTime(2025, 7, 29, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9802),
                            CategoryId = 1,
                            Description = "Cold-hardy and packed with nutrition.",
                            ImageUrl = "https://images.unsplash.com/photo-1576045057995-568f588f82fb?q=80&w=1160&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Spinach Seeds",
                            Price = 2.49m,
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000006"),
                            AddedOn = new DateTime(2025, 7, 28, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9807),
                            CategoryId = 1,
                            Description = "Hot and sweet varieties perfect for salsa.",
                            ImageUrl = "https://images.unsplash.com/photo-1608737637507-9aaeb9f4bf30?q=80&w=870&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Pepper Seeds",
                            Price = 3.99m,
                            StockQuantity = 75
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000007"),
                            AddedOn = new DateTime(2025, 7, 31, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9811),
                            CategoryId = 1,
                            Description = "Aromatic herbs for cooking and companion planting.",
                            ImageUrl = "https://images.unsplash.com/photo-1627738663093-d0779d56e3bc?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Basil Seeds",
                            Price = 1.89m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000008"),
                            AddedOn = new DateTime(2025, 8, 1, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9826),
                            CategoryId = 1,
                            Description = "High-yielding summer squash variety.",
                            ImageUrl = "https://images.unsplash.com/photo-1596056094719-10ba4f7ea650?q=80&w=870&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Zucchini Seeds",
                            Price = 2.39m,
                            StockQuantity = 55
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000009"),
                            AddedOn = new DateTime(2025, 7, 26, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9830),
                            CategoryId = 1,
                            Description = "Large pumpkins ideal for decoration and pie.",
                            ImageUrl = "https://images.unsplash.com/photo-1506917728037-b6af01a7d403?q=80&w=1548&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Pumpkin Seeds",
                            Price = 3.25m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000010"),
                            AddedOn = new DateTime(2025, 8, 2, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9837),
                            CategoryId = 1,
                            Description = "Fast-growing root vegetable for spring or fall.",
                            ImageUrl = "https://images.unsplash.com/photo-1589753014594-0676c69bbcbe?q=80&w=1480&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Radish Seeds",
                            Price = 1.79m,
                            StockQuantity = 85
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            AddedOn = new DateTime(2025, 7, 17, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9840),
                            CategoryId = 2,
                            Description = "All-natural fertilizer for vegetables and flowers.",
                            ImageUrl = "/images/fertilizer-organic.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Organic Fertilizer 5kg",
                            Price = 12.95m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            AddedOn = new DateTime(2025, 8, 1, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9844),
                            CategoryId = 2,
                            Description = "Concentrated enhancer for better root development.",
                            ImageUrl = "/images/fertilizer-liquid.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Liquid Plant Booster",
                            Price = 8.49m,
                            StockQuantity = 65
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000003"),
                            AddedOn = new DateTime(2025, 7, 24, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9847),
                            CategoryId = 2,
                            Description = "Rich compost to improve soil structure.",
                            ImageUrl = "https://images.unsplash.com/photo-1649577193391-f13d769d011d?q=80&w=1742&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Compost Mix",
                            Price = 6.99m,
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000004"),
                            AddedOn = new DateTime(2025, 7, 27, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9850),
                            CategoryId = 2,
                            Description = "Natural soil amendment high in nutrients.",
                            ImageUrl = "https://unclejimswormfarm.com/wp-content/uploads/2016/02/harvesting-worm-castings.jpeg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Worm Castings",
                            Price = 9.49m,
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000005"),
                            AddedOn = new DateTime(2025, 7, 29, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9855),
                            CategoryId = 2,
                            Description = "Promotes strong root growth and blooms.",
                            ImageUrl = "https://radhakrishnaagriculture.in/cdn/shop/files/boneMeal.jpg?v=1711435429",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Bone Meal Fertilizer",
                            Price = 5.95m,
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000006"),
                            AddedOn = new DateTime(2025, 7, 31, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9860),
                            CategoryId = 2,
                            Description = "Liquid organic fertilizer for leafy greens.",
                            ImageUrl = "https://www.pennington.com/-/media/Project/OneWeb/Pennington/Images/blog/fertilizer/what-is-fish-fertilizer/fish-fertilizer-og.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Fish Emulsion",
                            Price = 7.25m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000007"),
                            AddedOn = new DateTime(2025, 7, 28, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9864),
                            CategoryId = 2,
                            Description = "Boosts plant resistance and nutrient uptake.",
                            ImageUrl = "https://www.marketresearchintellect.com/images/blogs/ocean-s-bounty-the-rising-tide-of-seaweed-fertilizer-market-growth.webp",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Seaweed Extract",
                            Price = 6.75m,
                            StockQuantity = 55
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000008"),
                            AddedOn = new DateTime(2025, 8, 2, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9868),
                            CategoryId = 2,
                            Description = "Feeds plants for up to 3 months.",
                            ImageUrl = "https://assets.manufactum.de/p/207/207508/207508_02.jpg/organic-fertilizer-sheep-wool-pellets.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Slow Release Pellets",
                            Price = 10.00m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000009"),
                            AddedOn = new DateTime(2025, 8, 3, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9872),
                            CategoryId = 2,
                            Description = "Fast-acting nitrogen formula for leafy growth.",
                            ImageUrl = "https://cdn.shopify.com/s/files/1/0015/4976/2632/files/Nitrogen_Max1_whiite.jpg?v=1752089739&width=600&height=600&crop=center",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Nitrogen Boost",
                            Price = 4.95m,
                            StockQuantity = 65
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000010"),
                            AddedOn = new DateTime(2025, 8, 4, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9913),
                            CategoryId = 2,
                            Description = "Balanced nutrients for all plants.",
                            ImageUrl = "https://i5.walmartimages.com/seo/Expert-Gardener-All-Purpose-Plant-Food-Fertilizer-12-0-12-40-lb_b0d92f08-b9c5-4ccd-b212-42087b2ce829.76e288d920602343a57f64968148409e.jpeg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "All-Purpose Fertilizer",
                            Price = 6.49m,
                            StockQuantity = 85
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            AddedOn = new DateTime(2025, 7, 30, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9917),
                            CategoryId = 3,
                            Description = "Protect your crops from pests without chemicals.",
                            ImageUrl = "/images/pesticide-eco.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Eco-Friendly Insect Repellent",
                            Price = 5.75m,
                            StockQuantity = 70
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000002"),
                            AddedOn = new DateTime(2025, 8, 4, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9921),
                            CategoryId = 3,
                            Description = "Effective against mites, aphids, and fungi.",
                            ImageUrl = "/images/pesticide-neem.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Neem Oil Spray",
                            Price = 9.99m,
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000003"),
                            AddedOn = new DateTime(2025, 8, 3, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9924),
                            CategoryId = 3,
                            Description = "Natural garlic-based spray for flying insects.",
                            ImageUrl = "https://www.arbico-organics.com/images/uploads/1452603_Garlic_Barrier_AG_600x600.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Garlic Pest Repellent",
                            Price = 4.99m,
                            StockQuantity = 60
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000004"),
                            AddedOn = new DateTime(2025, 7, 31, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9929),
                            CategoryId = 3,
                            Description = "Kills soft-bodied insects on contact.",
                            ImageUrl = "https://m.media-amazon.com/images/I/81-uTI1JLnL._UF350,350_QL80_.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Insecticidal Soap",
                            Price = 6.50m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000005"),
                            AddedOn = new DateTime(2025, 7, 29, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9935),
                            CategoryId = 3,
                            Description = "Fast knockdown effect for garden pests.",
                            ImageUrl = "https://m.media-amazon.com/images/I/61Cmdc161eL.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Pyrethrin Spray",
                            Price = 8.75m,
                            StockQuantity = 55
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000006"),
                            AddedOn = new DateTime(2025, 8, 1, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9938),
                            CategoryId = 3,
                            Description = "Effective for snails and slugs in vegetable beds.",
                            ImageUrl = "https://www.nexles.com/media/catalog/product/cache/18/thumbnail/500x/8083c875e83be300356bb052a4e4af68/a/u/au_190090_def_ps.png.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Slugo Bait",
                            Price = 5.25m,
                            StockQuantity = 40
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000007"),
                            AddedOn = new DateTime(2025, 8, 2, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9942),
                            CategoryId = 3,
                            Description = "Bacillus thuringiensis for caterpillar management.",
                            ImageUrl = "https://files.plytix.com/api/v1.1/file/public_files/pim/assets/43/37/8d/5e/5e8d3743202d9eba64d3af60/images/12/a0/da/63/63daa01245952636f4885023/8066_LifeStyle_02.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "BT Caterpillar Control",
                            Price = 7.85m,
                            StockQuantity = 45
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000008"),
                            AddedOn = new DateTime(2025, 7, 31, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9945),
                            CategoryId = 3,
                            Description = "Diatomaceous earth for crawling insects.",
                            ImageUrl = "https://dombikagro.com/image/catalog/HOMEVO/organichen_preparat_pesticiden_neutralizator_homevo_homevo_neutralizator_pesticide.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "DE Powder",
                            Price = 6.10m,
                            StockQuantity = 35
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000009"),
                            AddedOn = new DateTime(2025, 7, 28, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9948),
                            CategoryId = 3,
                            Description = "Repels rodents and bugs naturally.",
                            ImageUrl = "https://m.media-amazon.com/images/I/612sBQNgyNL.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Chili Pepper Spray",
                            Price = 3.99m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000010"),
                            AddedOn = new DateTime(2025, 7, 27, 17, 20, 1, 643, DateTimeKind.Local).AddTicks(9953),
                            CategoryId = 3,
                            Description = "Fungicide and mite control for vegetables.",
                            ImageUrl = "https://m.media-amazon.com/images/I/51sTPn6ij7L._SL1500_.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Sulfur Dust",
                            Price = 4.25m,
                            StockQuantity = 60
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Cart", b =>
                {
                    b.HasOne("AgroShopApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.CartItem", b =>
                {
                    b.HasOne("AgroShopApp.Data.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroShopApp.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Favorite", b =>
                {
                    b.HasOne("AgroShopApp.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgroShopApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Order", b =>
                {
                    b.HasOne("AgroShopApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.OrderItem", b =>
                {
                    b.HasOne("AgroShopApp.Data.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgroShopApp.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Product", b =>
                {
                    b.HasOne("AgroShopApp.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AgroShopApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AgroShopApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroShopApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AgroShopApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("AgroShopApp.Data.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
